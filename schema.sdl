directive @oneOf on INPUT_OBJECT

input AccountOwnerFilter @oneOf {
	role: StringFilter
	address: StringFilter
}


type Contract {
	"""
	Describe the current contract state.
	This will only provide very limited information regarding merkleized contracts.
	"""
	describe: String
	"""
	true if the contract expects a notification to be made, and we can tell that
	any notification sent at this time will cause the notification to be true.
	"""
	expectedNotificationIsTrue: Boolean
	"""
	The datum of the last observed utxo in the contract chain
	"""
	datumJson: String
	"""
	Script hash of the marlowe payout validator script used for this contract
	"""
	payoutValidatorHash: String
	"""
	The minimum time at which point this contract will be possible to transition to a possible next stage.
	"""
	minTime: Int
	"""
	Current contract definition in DSL format
	"""
	contractDsl: String
	"""
	Current contract definition in JSON format
	"""
	contractJson: String
	"""
	List of all remaining contract participants.
	"""
	remainingParticipants: [String!]!
	"""
	List of all known contract participants.
	"""
	participants: [String!]!
	"""
	JSON serialized representation of the current contract state.
	"""
	contractStateJson: String
	hasTimedOut: Boolean!
	"""
	Available only if the contract is in a state at which it may time out.
	This will be a negative value if the contract has already timed out.
	"""
	nextTimeOut: Float
	"""
	Base58 encoded version of block_num,tx_num,utxo_index. Used as cursor for marlowe-indexer.
	"""
	shortId: String!
	"""
	The hash of the transaction that initiated the contract utxo chain
	"""
	id: String!
	"""
	The marlowe validator hash where the contracts utxo chain lives.
	"""
	validatorHash: String!
	"""
	All observed states that this contract has been in
	"""
	transitions(filter: TransitionFilter): [MarloweTransition!]!
}

type ContractConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ContractEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Contract!]!
	totalIndexedContracts: Int!
	totalNumberOfContractsMatchingCurrentFilter: Int!
	totalNumberOfPagesUsingCurrentFilter: Int!
	pageSizeUsedForThisResultSet: Int!
	totalContractsInRequestedRange: Int!
	timeTakenMs: Float!
	currentPage: Float!
	log: [String!]!
}

"""
An edge in a connection.
"""
type ContractEdge {
	"""
	The item at the end of the edge
	"""
	node: Contract!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input ContractsFilter {
	"""
	The transaction hash and output index (hash#i) of the tx that created the contract
	"""
	id: StringFilter
	"""
	Custom cursor id used by marlowe-indexer, based on block,tx and utxo position on chain, converted to base58.
	"""
	shortId: StringFilter
	accountState: LockedAmountFilter
	"""
	The contract is fully closed: no further transitions are possible.
	"""
	isClosed: Boolean
	"""
	Filter by meta data attached to any tx of a contract
	"""
	metaData: StringFilter
	validatorHash: StringFilter
	"""
	Filter by number of bound values in current state
	"""
	numberOfBoundValues: NumFilter
	"""
	NOTE: This filter is not yet implemented.
	"""
	usesMerkleization: Boolean
	"""
	NOTE: This filter is not yet implemented.
	>> Find all contracts that this tx affected
	"""
	txId: StringFilter
	"""
	NOTE: This filter is not yet implemented.
	"""
	roleToken: [StringFilter!]
	"""
	NOTE: This filter is not yet implemented.
	"""
	rolePolicy: StringFilter
	"""
	NOTE: This filter is not yet implemented.
	"""
	participantAddress: [StringFilter!]
}




input LockedAmountFilter {
	amount: NumFilter
	currencySymbol: StringFilter
	tokenName: StringFilter
	accountOwner: AccountOwnerFilter
	numberOfAccounts: NumFilter
}

type LockedAmountsResult {
	amount: Float!
	currencySymbol: String!
	tokenName: String!
	accountOwnerRole: String
	accountOwnerAddr: String
}

type MarloweTransition {
	meta: String
	datumJson: String
	inputs: [String!]
	txId: String!
	utxoIndex: Float
	end: Boolean!
	slot: Float!
	blockHash: String!
	blockNum: Float!
	marloweScanStatus: String
	lockedFunds: [LockedAmountsResult!]
}

input NumFilter @oneOf {
	eq: Float
	gt: Float
	lt: Float
	lte: Float
	gte: Float
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

input Pagination {
	after: String
	before: String
	first: Int
	last: Int
	pageSize: Int
	page: Float
}

type PerfStats {
	indexedContracts: Int!
}

type QueryRoot {
	stats: String!
	contracts(filter: ContractsFilter, pagination: Pagination): ContractConnection!
	currentBlock: String
}


input StringFilter @oneOf {
	eq: String
	neq: String
	contains: String
	notContains: String
}

type SubscriptionRoot {
	"""
	Subscribe to events related to any contract or specific contracts using filters.
	"""
	contract: String!
	indexerPerfStats: PerfStats!
}

input TransitionFilter {
	"""
	Only show the most recent transition
	"""
	last: Boolean
	end: Boolean
	issues: Boolean
	txId: String
	slot: Float
	blockHash: String
	blockNum: Float
	marloweScanStatus: String
	issuesMatch: String
}

schema {
	query: QueryRoot
	subscription: SubscriptionRoot
}
