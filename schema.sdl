directive @oneOf on INPUT_OBJECT


type Contract {
	"""
	+ slot id of the block in which this contract was initialized
	+ index of the tx in that block
	+ index of the output containing the contract inside the tx.
	... converted to base58.
	"""
	shortId: String!
	"""
	hash id of the tx that initially created this contract instance
	"""
	id: String!
	"""
	All states in the contract, in order of first to last.
	"""
	transitions: [MarloweTransition!]!
}

type ContractConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ContractEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Contract!]!
	"""
	Total result set count
	"""
	totalIndexedContracts: Int!
	totalNumberOfContractsMatchingCurrentFilter: Int!
	totalNumberOfPagesUsingCurrentFilter: Int!
	pageSizeUsedForThisResultSet: Int!
	totalContractsInRequestedRange: Int!
	timeTakenMs: Float!
	currentPage: Float!
	log: [String!]!
}

"""
An edge in a connection.
"""
type ContractEdge {
	"""
	The item at the end of the edge
	"""
	node: Contract!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}




"""
This represents a single UTXO inside of a transaction which
changes the state of a Marlowe contract on chain.
One can either initialize multiple contracts in a single tx,
or "step" a single contract state. It is not possible to step multiple contracts
or Initialize a contract while also stepping another contract.
"""
type MarloweTransition {
	datum: String!
	redeemer: String!
	txId: String!
	"""
	Index of the UTXO that caused this transition. None if this transition finalized the contract (eg. no output was made to the Marlowe validator)
	"""
	utxoIndex: Float
	"""
	This is true if there can not be any more transitions after this one.
	"""
	end: Boolean!
	"""
	Slot number in which this transition occurred
	"""
	slot: Float!
	"""
	Block in which this transition occurred
	"""
	block: String!
	blockNum: Float!
	invalid: Boolean!
	issues: [String!]!
	marloweScanStatus: String
}

input MyFilter {
	id: StringFilter
	shortId: StringFilter
	hasIssues: Boolean
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

input Pagination {
	after: String
	before: String
	first: Int
	last: Int
}

type QueryRoot {
	stats: String!
	contracts(filter: MyFilter, pagination: Pagination, pageSize: Int, page: Float): ContractConnection!
	currentBlock: String
}


input StringFilter @oneOf {
	eq: String
	neq: String
	contains: String
	notContains: String
}

type SubscriptionRoot {
	interval(n: Int! = 1): Int!
}

schema {
	query: QueryRoot
	subscription: SubscriptionRoot
}
